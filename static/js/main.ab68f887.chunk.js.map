{"version":3,"sources":["Quill.js","logo.svg","StripeContainer.js","Grids.js","ButtonsBorder.js","MroApproval.js","SpeechBubble.js","Prod/ProdProductListing.js","ImageResize.js","ALink.js","ReactImageResize.js","Camera.js","App.js","reportWebVitals.js","index.js"],"names":["CustomToolbar","linkClick","imageClick","fileClick","id","className","defaultValue","onChange","e","persist","value","selected","onClick","Editor","useState","editorHtml","setEditorHtml","open","setOpen","html","console","log","modules","formats","theme","Modal","onClose","toolbar","container","handlers","insertImage","cursorPosition","this","quill","getSelection","index","insertText","setSelection","insertLink","insertFile","loadStripe","createData","name","calories","fat","carbs","protein","makeStyles","selectedBtn","border","borderBottom","borderRadius","unselectedBtn","tableWrapper","borderTop","marginTop","paper","padding","bold","fontWeight","notesInput","width","notesFieldInputProps","mroSaveWrapper","display","justifyContent","savedMroConfirmationText","color","patientDetailsRow","patientInfoValue","marginLeft","mroButtonsWrapper","marginBottom","mroButtonsWrapperMobile","textAlignCenter","textAlign","mroButtonsMobile","speechBubble","background","fontFamily","position","content","height","borderLeft","borderRight","right","bottom","categoriesHeaderWrapper","backgroundColor","categoriesList","listStyleType","margin","categoryItem","cursor","underLineSelected","left","borderWidth","borderStyle","borderColor","transition","underline","productsList","productsItems","breadcrumbs","listTittleWrapper","subTitleWrapper","productImageWrapper","overflow","productImage","transform","productNameText","productDetailsImage","maxWidth","productSmallImagesWrapper","maxHeight","productSmallImages","productDetailsNameWrapper","productDetailsArticleNumberWrapper","productDetailDescriptionWrapper","productDetailSubstancesWrapper","buyButtonWrapper","buyButton","boxShadow","textTransform","imageCursor","ALink","CONTAINER_WIDTH","CONTAINER_HEIGHT","useStyles","appBar","transitions","create","easing","sharp","duration","leavingScreen","logo","toolbarActions","alignItems","menuIconMobile","fill","mainMobile","grid","flexDirection","mainContainer","paddingBottom","row","backButton","backIcon","BarcodeReader","props","codeReader","handleClose","handleCapture","selectedDeviceId","videoInputDevices","setSelectedDeviceId","useEffect","decodeFromVideoDevice","result","err","text","reset","Grid","item","xs","length","target","map","device","MenuItem","deviceId","label","Camera","classes","BrowserMultiFormatReader","isScanning","setIsScanning","barcode","setBarcode","setVideoInputDevices","listVideoInputDevices","then","devices","catch","AppBar","elevation","Toolbar","style","alt","src","Menu","paddingTop","md","Button","startIcon","Typography","variant","fontSize","barcodeInputWrap","TextField","InputProps","notchedOutline","inputProps","maxLength","paddingLeft","barcodeTextInput","InputLabelProps","root","textFieldInputLabel","placeholder","Number","isInteger","borderTopLeftRadius","borderBottomLeftRadius","App","iframes","document","getElementsByTagName","classList","add","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ab68f887.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nfunction insertImage() {\r\n    const cursorPosition = this.quill.getSelection().index;\r\n    this.quill.insertText(cursorPosition, \"★\");\r\n    this.quill.setSelection(cursorPosition + 1);\r\n}\r\n\r\nfunction insertLink() {\r\n    const cursorPosition = this.quill.getSelection().index;\r\n    this.quill.insertText(cursorPosition, \"L\");\r\n    this.quill.setSelection(cursorPosition + 1);\r\n}\r\n\r\nfunction insertFile() {\r\n    const cursorPosition = this.quill.getSelection().index;\r\n    this.quill.insertText(cursorPosition, \"F\");\r\n    this.quill.setSelection(cursorPosition + 1);\r\n}\r\n\r\nconst CustomToolbar = ({linkClick, imageClick, fileClick}) => (\r\n    <div id=\"toolbar\">\r\n      <select className=\"ql-header\" defaultValue={\"\"} onChange={e => e.persist()}>\r\n        <option value=\"1\"/>\r\n        <option value=\"2\"/>\r\n        <option value=\"3\"/>\r\n        <option value=\"4\"/>\r\n        <option value=\"5\"/>\r\n        <option value=\"6\"/>\r\n        <option selected/>\r\n      </select>\r\n      <button className=\"ql-bold\"/>\r\n      <button className=\"ql-italic\"/>\r\n      <button className=\"ql-strike\"/>\r\n      <button className=\"ql-blockquote\"/>\r\n      <button className=\"ql-bullet\">\r\n        <FormatListBulletedIcon/>\r\n      </button>\r\n      {/* Check out to add ordered list */}\r\n     {/*  <button className=\"ql-ordered\">\r\n        <FormatListNumberedIcon/>\r\n      </button> */}\r\n      <button className=\"ql-insertLink\">\r\n        <LinkIcon onClick={linkClick}/>\r\n      </button>\r\n      <button className=\"ql-image\">\r\n        <ImageOutlinedIcon onClick={imageClick}/>\r\n      </button>\r\n      <button className=\"ql-insertFile\">\r\n        <AttachFileIcon onClick={fileClick}/>\r\n      </button>\r\n    </div>\r\n  );\r\n\r\nconst Editor = () => {\r\n\r\n    const [editorHtml, setEditorHtml] = useState(\"\");\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleChange = (html) => {\r\n      console.log(editorHtml)\r\n      setEditorHtml(html);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleLinkClick = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleInsertImageClick = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleFileClick = () => {\r\n        setOpen(true);\r\n    }\r\n  \r\n    return (\r\n      <>\r\n        <div>\r\n            <CustomToolbar \r\n                imageClick={handleInsertImageClick}\r\n                linkClick={handleLinkClick}\r\n                fileClick={handleFileClick}\r\n            />\r\n            <ReactQuill\r\n                onChange={handleChange}\r\n                modules={Editor.modules}\r\n                formats={Editor.formats}\r\n                theme={\"snow\"} // pass false to use minimal theme\r\n            />\r\n            <Modal open={open} onClose={handleClose}>\r\n                <h3>Hello</h3>\r\n            </Modal>\r\n        </div>\r\n      </>\r\n    );\r\n}  \r\n\r\nEditor.modules = {\r\n    toolbar: {\r\n      container: \"#toolbar\",\r\n      handlers: {\r\n        insertImage: insertImage,\r\n        insertLink: insertLink,\r\n        insertFile: insertFile\r\n      }\r\n    },\r\n\r\n};\r\n\r\nEditor.formats = [\r\n    \"header\",\r\n    \"font\",\r\n    \"size\",\r\n    \"bold\",\r\n    \"italic\",\r\n    \"underline\",\r\n    \"strike\",\r\n    \"blockquote\",\r\n    \"list\",\r\n    \"bullet\",\r\n    \"indent\",\r\n    \"link\",\r\n    \"image\",\r\n    \"color\"\r\n];\r\n\r\nexport default Editor;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\n\nimport { CheckoutForm } from \"./CheckoutForm\";\n\nconst PUBLIC_KEY = \"pk_test_51HziLZK7JTNQ6NQUAUxEi4rJJTofvNWeHzBDKONJ8sUU6gkLlNg2GFTD7g6lZm2K0n6UoUI8icmPhJ1WB7NT2Yji00AYgSrfFJ\";\n\nconst stripeTestPromise = loadStripe(PUBLIC_KEY);\n\nconst Stripe = () => {\n  return (\n    <Elements stripe={stripeTestPromise}>\n      <CheckoutForm />\n    </Elements>\n  );\n};\n\nexport default Stripe;","import React from \"react\";\nimport {Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nconst items = [\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n  {\n    name: \"andre\"\n  },\n];\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {name, calories, fat, carbs, protein};\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nconst Grids = () => {\n  return (\n    <Grid container>\n      {/*Left side*/}\n      <Grid item xs={10}>\n        <Grid container>\n          {/*Chart*/}\n          <Grid item xs={12}>\n            <img src=\"/referral.png\" alt=\"image\" style={{width: \"100%\", height: \"500px\"}}/>\n          </Grid>\n          {/*Table*/}\n          <Grid item xs={12} style={{marginTop: 50}}>\n            <TableContainer>\n              <Table size=\"small\" aria-label=\"a dense table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Dessert (100g serving)</TableCell>\n                    <TableCell align=\"right\">Calories</TableCell>\n                    <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n                    <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n                    <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((row) => (\n                    <TableRow key={row.name}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.calories}</TableCell>\n                      <TableCell align=\"right\">{row.fat}</TableCell>\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\n                      <TableCell align=\"right\">{row.protein}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/*Right side*/}\n      <Grid item xs={2}>\n        {items.map(item => (\n          <h6 key={item.name}>{item.name}</h6>\n        ))}\n      </Grid>\n    </Grid>\n  )\n};\n\nexport default Grids;","import React from \"react\";\nimport {Button, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {name, calories, fat, carbs, protein};\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nconst ButtonsBorder = () => {\n  const classes = useStyles();\n  const [selected, setSelected] = React.useState(1)\n\n  return (\n    <div style={{padding: 30}}>\n      <div>\n        <Button\n          className={selected === 1 ? classes.selectedBtn : classes.unselectedBtn}\n          onClick={() => setSelected(1)}\n        >\n          btn 1\n        </Button>\n        <Button\n          className={selected === 2 ? classes.selectedBtn : classes.unselectedBtn}\n          onClick={() => setSelected(2)}\n        >\n          btn 2\n        </Button>\n      </div>\n\n      <div className={classes.tableWrapper}>\n        <TableContainer>\n          <Table size=\"small\" aria-label=\"a dense table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Dessert (100g serving)</TableCell>\n                <TableCell align=\"right\">Calories</TableCell>\n                <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n                <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n                <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.calories}</TableCell>\n                  <TableCell align=\"right\">{row.fat}</TableCell>\n                  <TableCell align=\"right\">{row.carbs}</TableCell>\n                  <TableCell align=\"right\">{row.protein}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  selectedBtn: {\n    border: \"1px solid #000000\",\n    borderBottom: \"1px solid #ffffff\",\n    borderRadius: 0\n  },\n  unselectedBtn: {\n    borderRadius: 0\n  },\n  tableWrapper: {\n    borderTop: \"1px solid #000000\",\n    marginTop: \"-1px\"\n  }\n}));\n\nexport default ButtonsBorder;","import React, {useState} from 'react';\nimport {\n  Paper,\n  Grid,\n  FormControlLabel,\n  Typography,\n  Button,\n  TextField, Checkbox, Hidden\n} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n//DELETE THIS LOL\nconst getTranslation = value => {\n  return value;\n}\n\n/*TODO:\n*  Pass props\n*  Check colors\n*  Add logic for success message\n*  Check capitalization in buttons\n*  Integrate save button with API\n*  Show unlock checkbox if mro already approved/denied referral\n*  Fetch patient values\n* */\nconst MroApproval = props => {\n  const classes = useStyles();\n\n  const [confirmation, setConfirmation] = useState(0); // 0: none selected /1: deny positive result /2: confirm negative result\n  const [note, setNote] = useState(\"\");\n  const [unlocked, setUnlocked] = useState(false);\n\n  return (\n    <Paper elevation={1} className={classes.paper}>\n      <Grid container>\n\n        {/*Patient information section*/}\n        <Hidden only={['xs']}>\n          <Grid item xs={12} sm={6} md={8}>\n            <Typography\n              variant=\"subtitle1\"\n              gutterBottom\n              className={classes.bold}>\n              {getTranslation('analysis_detail_patient_information_title')}\n            </Typography>\n            <div style={{marginBottom: 20}}>\n              <div className={classes.patientDetailsRow}>\n                <Typography\n                  variant=\"subtitle2\"\n                  gutterBottom\n                  className={classes.bold}>\n                  {getTranslation('analysis_detail_patient_name_label')}\n                </Typography>\n                <Typography variant=\"subtitle2\" gutterBottom className={classes.patientInfoValue}>My Name</Typography>\n              </div>\n              <div className={classes.patientDetailsRow}>\n                <Typography\n                  variant=\"subtitle2\"\n                  gutterBottom\n                  className={classes.bold}>\n                  {getTranslation('analysis_detail_patient_ssn_label')}\n                </Typography>\n                <Typography variant=\"subtitle2\" gutterBottom className={classes.patientInfoValue}>My personal\n                  number</Typography>\n              </div>\n            </div>\n            <div className={classes.patientDetailsRow}>\n              <Typography\n                variant=\"subtitle2\"\n                gutterBottom\n                className={classes.bold}>\n                {getTranslation('analysis_detail_patient_phone_label')}\n              </Typography>\n              <Typography variant=\"subtitle2\" gutterBottom className={classes.patientInfoValue}>My Phone</Typography>\n            </div>\n            <div className={classes.patientDetailsRow}>\n              <Typography\n                variant=\"subtitle2\"\n                gutterBottom\n                className={classes.bold}>\n                {getTranslation('analysis_detail_patient_email_label')}\n              </Typography>\n              <Typography variant=\"subtitle2\" gutterBottom className={classes.patientInfoValue}>My Email</Typography>\n            </div>\n          </Grid>\n        </Hidden>\n        <Hidden smUp>\n          <Grid item xs={12} md={8}>\n            <Typography\n              variant=\"subtitle1\"\n              gutterBottom\n              className={classes.bold}>\n              {getTranslation('analysis_detail_patient_information_title')}\n            </Typography>\n            <Grid container style={{marginBottom: 20}}>\n              <Grid item xs={12} md={2}>\n                <Typography\n                  variant=\"subtitle2\"\n                  className={classes.bold}>\n                  {getTranslation('analysis_detail_patient_name_label')}\n                </Typography>\n              </Grid>\n              <Grid item xs={12} md={10}>\n                <Typography variant=\"subtitle2\" gutterBottom>My Name</Typography>\n              </Grid>\n              <Grid item xs={12} md={2}>\n                <Typography\n                  variant=\"subtitle2\"\n                  className={classes.bold}>\n                  {getTranslation('analysis_detail_patient_ssn_label')}\n                </Typography>\n              </Grid>\n              <Grid item xs={12} md={10}>\n                <Typography variant=\"subtitle2\" gutterBottom>My personal\n                  number</Typography>\n              </Grid>\n              <Grid xs={12} md={2}>\n                <Typography\n                  variant=\"subtitle2\"\n                  className={classes.bold}\n                >{getTranslation('analysis_detail_patient_phone_label')}\n                </Typography>\n              </Grid>\n              <Grid item xs={12} md={10}>\n                <Typography variant=\"subtitle2\" gutterBottom>My Phone</Typography>\n              </Grid>\n              <Grid xs={12} md={2}>\n                <Typography\n                  variant=\"subtitle2\"\n                  className={classes.bold}>\n                  {getTranslation('analysis_detail_patient_email_label')}\n                </Typography>\n              </Grid>\n              <Grid item xs={12} md={10}>\n                <Typography variant=\"subtitle2\" gutterBottom>My Email</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Hidden>\n\n        {/*MRO section*/}\n        <Grid item xs={12} sm={6} md={4}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle2\">{getTranslation('analysis_detail_mro_buttons_label')}</Typography>\n            </Grid>\n            <Hidden only={['xs', 'sm']}>\n              <Grid item xs={12} className={classes.mroButtonsWrapper}>\n                <Grid container spacing={1}>\n                  <Grid item md={6}>\n                    <Button\n                      variant=\"contained\"\n                      color={confirmation === 1 ? 'primary' : 'secondary'}\n                      onClick={() => setConfirmation(1)}\n                    >\n                      {getTranslation('analysis_detail_deny_button')}\n                    </Button>\n                  </Grid>\n                  <Grid item md={6} style={{textAlign: 'right'}}>\n                    <Button\n                      variant=\"contained\"\n                      color={confirmation === 2 ? 'primary' : 'secondary'}\n                      onClick={() => setConfirmation(2)}\n                    >\n                      {getTranslation('analysis_detail_confirm_button')}\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Hidden>\n            <Hidden mdUp>\n              <Grid item xs={12} className={classes.mroButtonsWrapperMobile}>\n                <div className={classes.textAlignCenter}>\n                  <Button\n                    variant=\"contained\"\n                    color={confirmation === 1 ? 'primary' : 'secondary'}\n                    className={classes.mroButtonsMobile}\n                    onClick={() => setConfirmation(1)}\n                    style={{marginBottom: 10}}\n                  >\n                    {getTranslation('analysis_detail_deny_button')}\n                  </Button>\n                </div>\n                <div className={classes.textAlignCenter}>\n                  <Button\n                    variant=\"contained\"\n                    color={confirmation === 2 ? 'primary' : 'secondary'}\n                    className={classes.mroButtonsMobile}\n                    onClick={() => setConfirmation(2)}\n                  >\n                    {getTranslation('analysis_detail_confirm_button')}\n                  </Button>\n                </div>\n              </Grid>\n            </Hidden>\n            <Grid item xs={12}>\n              <Typography variant='subtitle2'>{getTranslation('analysis_detail_reason_label')}</Typography>\n              <TextField\n                variant='outlined'\n                multiline\n                rows={2}\n                className={classes.notesInput}\n                InputProps={{\n                  className: classes.notesFieldInputProps\n                }}\n                value={note}\n                disabled={!unlocked}\n                onChange={e => setNote(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <div className={classes.mroSaveWrapper}>\n                <div>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={unlocked}\n                        onChange={e => setUnlocked(e.target.checked)}\n                        name='unlocked'\n                        size='small'\n                      />\n                    }\n                    label={<Typography\n                      variant='subtitle2'>{getTranslation('analysis_detail_mro_checkbox_label')}</Typography>}\n                  />\n                  <Typography variant='body2' className={classes.savedMroConfirmationText}>\n                    {getTranslation('analysis_detail_mro_success_message')}\n                  </Typography>\n                </div>\n                <div>\n                  <Button\n                    variant='outlined'\n                    color='primary'\n                    onClick={() => {\n                    }}\n                  >\n                    {getTranslation('generic_button_cancel')}\n                  </Button>\n                </div>\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: 20,\n  },\n  bold: {\n    fontWeight: 'bold'\n  },\n  notesInput: {\n    width: '100%'\n  },\n  notesFieldInputProps: {\n    padding: 10\n  },\n  mroSaveWrapper: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginTop: 10\n  },\n  savedMroConfirmationText: {\n    color: '#28a745'\n  },\n  patientDetailsRow: {\n    display: 'flex'\n  },\n  patientInfoValue: {\n    marginLeft: 5\n  },\n  mroButtonsWrapper: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: 10\n  },\n  mroButtonsWrapperMobile: {\n    marginTop: 5\n  },\n  textAlignCenter: {\n    textAlign: 'center'\n  },\n  mroButtonsMobile: {\n    width: 180,\n    marginBottom: 10,\n  }\n}));\n\nexport default MroApproval;","import React from 'react';\nimport {Typography} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst SpeechBubble = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.speechBubble}>\n      <Typography variant='subtitle1'>Jerry</Typography>\n      <Typography variant='subtitle1'>Hello!</Typography>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  speechBubble: {\n    width: 300,\n    background: '#00bfb6',\n    padding: 5,\n    textAlign: 'center',\n    color: '#fff',\n    fontFamily: 'arial',\n    position: 'relative',\n\n    '&:before': {\n      content: \"''\",\n      width: 0,\n      height: 0,\n      position: 'absolute',\n      borderLeft: '10px solid transparent',\n      borderRight: '10px solid #00bfb6',\n      borderTop: '10px solid #00bfb6',\n      borderBottom: '10px solid transparent',\n      right: 24,\n      //bottom: '-13px',\n      bottom: '-20px'\n\n\n/*      width: 40,\n      height: 40,\n      bottom: '-100px',\n      background: 'rgba(0,0,0,0.1)',\n      transform: 'rotate(45deg)'*/\n    }\n  }\n}));\n\nexport default SpeechBubble;","import React, {useState} from 'react';\nimport {Grid, Typography} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ListItem from \"./ListItem\";\nimport CategoriesTreeView from \"./CategoriesTreeView\";\nimport Product from \"./ProductDetails\";\n\nconst CATEGORIES = [\n  {\n    name: 'Drogtester multi för urin',\n    id: 0,\n    products: [\n      {\n        name: 'LITA Multi-15/EtG, 25st'\n      },\n      {\n        name: 'LITA Multi-15/Ketamin, 25st'\n      },\n      {\n        name: 'LITA Multi-15/Urin-ID, 25st'\n      },\n      {\n        name: 'LITA Multi-4, 25st'\n      },\n      {\n        name: 'LITA Multi-THC/Urin-Id, 25stNY!'\n      },\n      {\n        name: 'LITA Multi-17, 25st'\n      }\n    ]\n  },\n  {\n    name: 'Drogtester singel för urin',\n    id: 1,\n    products: [\n      {\n        name: 'Singel THC 200, 25st'\n      },\n      {\n        name: 'Singel OPI 200, 25st'\n      },\n      {\n        name: 'Singel COC 200, 25st'\n      },\n      {\n        name: 'Singel Fentanyl 200, 25st'\n      }\n    ]\n  },\n  {\n    name: 'Laboratoriekit',\n    id: 2,\n    products: [\n      {\n        name: 'Lab Kit Saliv'\n      },\n      {\n        name: 'Lab Kit Urin'\n      },\n      {\n        name: 'Lab Kit Venblod'\n      },\n      {\n        name: 'Lab Kit Kapillart helbod - pappkort'\n      }\n    ]\n  },\n  {\n    name: 'Bakterietester',\n    id: 3,\n    products: []\n  },\n  {\n    name: 'Snabbtest COVID-19',\n    id: 4,\n    products: [\n      {\n        name: 'Antikroppstest COVID-19 Kassett, 20 st'\n      },\n      {\n        name: 'Antigentest COVID-19, 5 st'\n      },\n    ]\n  },\n  {\n    name: 'Övrigt',\n    id: 5,\n    products: [\n      {\n        name: 'IR- Termometer'\n      },\n      {\n        name: 'Urin-ID, 25st'\n      },\n      {\n        name: 'Buffertlösning för preparatanalys'\n      },\n    ]\n  },\n  {\n    name: 'Visa alla',\n    id: 6,\n    products: [\n      {\n        name: 'LITA Multi-15/EtG, 25st'\n      },\n      {\n        name: 'LITA Multi-15/Ketamin, 25st'\n      },\n      {\n        name: 'LITA Multi-14/Urin-ID, 25st'\n      },\n    ]\n  },\n];\n\nconst PRODUCTS = [\n  {\n    name: 'LITA Multi-21, 25st',\n    description: 'AMP/BUP/BZO/COC/EDDP/OPI/MET-MDMA/FYL/OXY/THC25/TML/ZOL/MPD/ETG/ACL/ZOP'\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n    description: 'AMP/BUP/BZO/COC/EDDP/OPI/MET-MDMA/FYL/OXY/THC25/TML/ZOL/MPD/ETG/ACL/ZOP'\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  }, {\n    name: 'LITA Multi-21, 25st',\n  }, {\n    name: 'LITA Multi-21, 25st',\n    description: 'AMP/BUP/BZO/COC/EDDP/OPI/MET-MDMA/FYL/OXY/THC25/TML/ZOL/MPD/ETG/ACL/ZOP'\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n    description: 'AMP/BUP/BZO/COC/EDDP/OPI/MET-MDMA/FYL/OXY/THC25/TML/ZOL/MPD/ETG/ACL/ZOP'\n  }, {\n    name: 'LITA Multi-21, 25st',\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  },\n  {\n    name: 'LITA Multi-21, 25st',\n  }\n];\n\nconst ProductListing = () => {\n  const classes = useStyles();\n\n  const [selectedCategory, setSelectedCategory] = useState(0);\n  const [selectedProduct, setSelectedProduct] = useState('');\n\n  return (\n    <Grid container spacing={4}>\n      {/*Categories*/}\n      <Grid item xs={12} sm={4}>\n        <Grid container>\n          <Grid item xs={12} className={classes.categoriesHeaderWrapper}>\n            Produkter\n          </Grid>\n          <Grid item xs={12}>\n            <CategoriesTreeView\n              items={CATEGORIES}\n              selectedCategory={selectedCategory}\n              setSelectedCategory={setSelectedCategory}\n              classes={classes}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n\n      {/*Content*/}\n      <Grid item xs={12} sm={8}>\n        <Grid container>\n          <Grid item xs={12} className={classes.breadcrumbs}>\n            {`HEM  /  SNABBTESTER  /  DROGTESTER MULTI FOR URIN`}\n          </Grid>\n          <Grid item xs={12}>\n            {selectedProduct && selectedProduct !== '' ?\n              (<Product classes={classes}/>)\n              :\n              (\n                <Grid container spacing={3}>\n                  {PRODUCTS && PRODUCTS.length > 0 && PRODUCTS.map((product, index) => (\n                    <ListItem product={product} onProductClick={setSelectedProduct} classes={classes} key={index}/>\n                  ))}\n                </Grid>\n              )\n            }\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  categoriesHeaderWrapper: {\n    backgroundColor: '#E41937',\n    padding: '15px 10px',\n    color: '#ffffff'\n  },\n  categoriesList: {\n    listStyleType: 'none',\n    margin: 0,\n    padding: '0px 0px 0px 5px'\n  },\n  categoryItem: {\n    color: \"#222222\",\n    cursor: \"pointer\",\n    margin: '18px 0px',\n  },\n  underLineSelected: {\n    position: 'relative',\n    \"&:after\": {\n      content: '\"\"',\n      bottom: '-5px',\n      position: 'absolute',\n      left: 0,\n      width: '100%',\n      borderWidth: '0px 0px 2px 0px',\n      borderStyle: 'solid',\n      borderColor: '#E41937',\n      transition: 'width .3s ease',\n    }\n  },\n  underline: {\n    position: 'relative',\n    \"&:after\": {\n      content: '\"\"',\n      bottom: '-5px',\n      position: 'absolute',\n      left: 0,\n      width: '0%',\n      borderWidth: '0px 0px 2px 0px',\n      borderStyle: 'solid',\n      borderColor: '#E41937',\n      transition: 'width .3s ease',\n    },\n    \"&:hover::after\": {\n      width: \"100%\",\n      position: 'absolute',\n    }\n  },\n  productsList: {\n    listStyleType: 'none',\n    margin: 0,\n    padding: '0px 0px 0px 15px'\n  },\n  productsItems: {\n    color: \"#222222\",\n    cursor: \"pointer\",\n    margin: '18px 0px',\n  },\n  breadcrumbs: {\n    backgroundColor: '#f4f4f4',\n    padding: '15px 10px',\n    marginBottom: 40\n  },\n  listTittleWrapper: {\n    marginBottom: 20\n  },\n  subTitleWrapper: {\n    marginBottom: 15\n  },\n  productImageWrapper: {\n    border: '1px solid #dfdfdf',\n    overflow: 'hidden',\n    cursor: 'pointer'\n  },\n  productImage: {\n    width: '100%',\n    height: '100%',\n    transition: 'transform 0.3s',\n    '&:hover': {\n      transform: 'scale(1.05)'\n    }\n  },\n  productNameText: {\n    marginTop: 10,\n  },\n  productDetailsImage: {\n    maxWidth: 400\n  },\n  productSmallImagesWrapper: {\n    border: '1px solid #dfdfdf',\n    cursor: 'pointer',\n    maxHeight: 120,\n    maxWidth: 120\n  },\n  productSmallImages: {\n    width: '100%',\n    height: '100%',\n  },\n  productDetailsNameWrapper: {\n    marginBottom: 20\n  },\n  productDetailsArticleNumberWrapper: {\n    marginBottom: 40\n  },\n  productDetailDescriptionWrapper: {\n    marginBottom: 20\n  },\n  productDetailSubstancesWrapper: {\n    marginBottom: 20\n  },\n  buyButtonWrapper: {\n    textAlign: 'right'\n  },\n  buyButton: {\n    backgroundColor: '#008CBA',\n    borderColor: '#007095',\n    color: '#ffffff',\n    borderRadius: 0,\n    boxShadow: 'none',\n    textTransform: 'capitalize',\n    padding: '9px 25px'\n  }\n}));\n\nexport default ProductListing;","import React, {useRef, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst ImageResize = () => {\n  const classes = useStyles();\n  const imageRef = useRef(null);\n\n  const [size, setSize] = useState({x: 474, y: 474});\n  const [resizeCursor, setResizeCursor] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  const handler = (mouseDownEvent) => {\n    if (resizeCursor) {\n      const startSize = size;\n      const startPosition = {x: mouseDownEvent.pageX, y: mouseDownEvent.pageY};\n\n      function onMouseMove(mouseMoveEvent) {\n        setSize(currentSize => ({\n          x: startSize.x - startPosition.x + mouseMoveEvent.pageX,\n          y: startSize.y - startPosition.y + mouseMoveEvent.pageY\n        }));\n      }\n\n      function onMouseUp() {\n        document.body.removeEventListener(\"mousemove\", onMouseMove);\n        // uncomment the following line if not using `{ once: true }`\n        document.body.removeEventListener(\"mouseup\", onMouseUp);\n      }\n\n      document.body.addEventListener(\"mousemove\", onMouseMove);\n      document.body.addEventListener(\"mouseup\", onMouseUp, {once: true});\n    }\n  };\n\n  const handleMouseOver = e => {\n    let img = e.target.getBoundingClientRect();\n    let x = e.clientX - img.left; //x position within the element.\n    let y = e.clientY - img.top;  //y position within the element.\n    if (x >= size.x - 5 && y >= size.y - 5) {\n      setResizeCursor(true);\n    } else {\n      setResizeCursor(false);\n    }\n  };\n  console.log(selectedImage)\n  return (\n    <>\n      <input\n        type=\"file\"\n        name=\"myImage\"\n        onChange={(event) => {\n          setSelectedImage(event.target.files[0]);\n        }}\n      />\n      <div className={classes.container}>\n        {selectedImage &&\n        <img\n          ref={imageRef}\n          src={URL.createObjectURL(selectedImage)}\n          alt='image'\n          draggable=\"false\"\n          className={resizeCursor ? classes.imageCursor : {}}\n          onMouseDown={handler}\n          onMouseOver={handleMouseOver}\n          onMouseMove={handleMouseOver}\n          width={size.x}\n          height={size.y}\n        />\n        }\n      </div>\n    </>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: 50,\n    width: \"500px\",\n    height: \"750px\",\n    border: \"1px solid black\",\n    background: \"#6495ED\"\n  },\n  imageCursor: {\n    cursor: \"se-resize\"\n  }\n}));\n\nexport default ImageResize;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction ALink({ children, className, style, ...props }) {\n  function defaultFunction(e) {\n    if (props.to === '#') {\n      e.preventDefault();\n    }\n  }\n\n  return (\n    <Link {...props} onClick={defaultFunction} className={className} style={style}>\n      {children}\n    </Link>\n  );\n};\n\nexport default ALink;\n","import React, {useEffect, useState, useRef} from \"react\";\nimport Resizer from \"react-image-file-resizer\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst CONTAINER_WIDTH = 500;\nconst CONTAINER_HEIGHT = 750;\n\nconst ReactImageResize = () => {\n  const classes = useStyles();\n  const containerRef = useRef(null);\n\n  const [selectedImage, setSelectedImage] = useState(\"\");\n  const [size, setSize] = useState({x: 474, y: 474});\n  const [resizeCursor, setResizeCursor] = useState(false);\n  const [ratio, setRatio] = useState(1);\n\n  const fileChangedHandler = event => {\n    let file;\n    let width;\n    let height;\n    if (event.target.files[0]) {\n      file = event.target.files[0]\n    }\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const image = new Image();\n        image.src = reader.result;\n        image.onload = () => {\n          let r = image.width / image.height;\n          if ((image.width > CONTAINER_WIDTH && image.height <= CONTAINER_HEIGHT) || (image.height > CONTAINER_HEIGHT && image.width <= CONTAINER_WIDTH)) {\n            width = CONTAINER_WIDTH;\n            height = CONTAINER_WIDTH / r;\n          }\n          if (image.width > CONTAINER_WIDTH && image.height > CONTAINER_HEIGHT) {\n            let scaleFactor;\n            if (image.width > image.height) {\n              scaleFactor = CONTAINER_WIDTH / image.width\n              width = CONTAINER_WIDTH;\n              height = image.height * scaleFactor;\n            } else {\n              scaleFactor = CONTAINER_HEIGHT / image.height;\n              width = image.width * scaleFactor;\n              height = CONTAINER_HEIGHT\n            }\n          }\n          if(image.width < CONTAINER_WIDTH && image.height < CONTAINER_HEIGHT) {\n            width = image.width;\n            height = image.height;\n          }\n         setSize({x: width, y: height})\n        }\n      }\n      reader.readAsDataURL(file);\n      try {\n        Resizer.imageFileResizer(\n          file,\n          width,\n          height,\n          \"JPEG\",\n          100,\n          0,\n          (uri) => {\n            setSelectedImage(uri);\n          },\n          \"base64\",\n          width,\n          height\n        );\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  const getRatio = () => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = selectedImage;\n      img.onload = () => {\n        resolve(img)\n      };\n      img.onerror = reject;\n    })\n  };\n\n  const handler = (mouseDownEvent) => {\n    if (resizeCursor) {\n      const startSize = size;\n      const startPosition = {x: mouseDownEvent.pageX, y: mouseDownEvent.pageY};\n\n      function onMouseMove(mouseMoveEvent) {\n        setSize(currentSize => ({\n          x: startSize.x - startPosition.x + mouseMoveEvent.pageX,\n          y: (startSize.x - startPosition.x + mouseMoveEvent.pageX) / ratio\n        }));\n      }\n\n      function onMouseUp() {\n        document.body.removeEventListener(\"mousemove\", onMouseMove);\n        // uncomment the following line if not using `{ once: true }`\n        document.body.removeEventListener(\"mouseup\", onMouseUp);\n      }\n\n      document.body.addEventListener(\"mousemove\", onMouseMove);\n      document.body.addEventListener(\"mouseup\", onMouseUp, {once: true});\n    }\n  };\n\n  const handleMouseOver = e => {\n    let img = e.target.getBoundingClientRect();\n    let x = e.clientX - img.left; //x position within the element.\n    let y = e.clientY - img.top;  //y position within the element.\n\n    if (x >= size.x - 5 && y >= size.y - 5) {\n      setResizeCursor(true);\n    } else {\n      setResizeCursor(false);\n    }\n  };\n\n  const handleCrop = () => {\n    const container = containerRef.current;\n    const image = container.querySelector('img');\n\n    // Create a canvas element with the desired dimensions\n    const canvas = document.createElement('canvas');\n    canvas.width = container.offsetWidth;\n    canvas.height = container.offsetHeight;\n\n    // Draw the contents of the div onto the canvas\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n    // Export the canvas as an image\n    const dataUrl = canvas.toDataURL('image/jpeg');\n    const link = document.createElement('a');\n    link.href = dataUrl;\n    link.download = 'cropped-image.jpg';\n    link.click();\n  }\n\n  useEffect(() => {\n    if (selectedImage) {\n      getRatio()\n        .then(res => {\n          let ratio = res.width / res.height\n          setRatio(ratio)\n        })\n        .catch(error => console.log(error))\n    }\n  }, [selectedImage])\n\n  return (\n    <div className=\"App\">\n      <input type=\"file\" onChange={fileChangedHandler}/>\n      <div ref={containerRef} className={classes.container}>\n        {selectedImage &&\n        <img\n          src={selectedImage}\n          alt='image'\n          draggable=\"false\"\n          className={resizeCursor ? classes.imageCursor : {}}\n          onMouseDown={handler}\n          onMouseOver={handleMouseOver}\n          onMouseMove={handleMouseOver}\n          width={size.x}\n          height={size.y}\n        />\n        }\n      </div>\n      <button onClick={handleCrop} style={{marginTop: 40}}>Crop</button>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: 50,\n    width: CONTAINER_WIDTH,\n    height: CONTAINER_HEIGHT,\n    border: \"1px solid black\",\n    background: \"#6495ED\"\n  },\n  imageCursor: {\n    cursor: \"se-resize\"\n  }\n}));\nexport default ReactImageResize;\n","import React, {useEffect, useState} from \"react\";\nimport {AppBar, Toolbar, Grid, Button, Typography, TextField, Select, MenuItem} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Menu as MenuIcon} from \"@material-ui/icons\";\nimport {BrowserMultiFormatReader, NotFoundException} from '@zxing/library';\nimport KeyboardBackspaceIcon from \"@material-ui/icons/KeyboardBackspace\";\nimport CameraAltOutlinedIcon from \"@material-ui/icons/CameraAltOutlined\";\n\nconst useStyles = makeStyles(theme => ({\n    appBar: {\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        backgroundColor: \"#ffffff\"\n    },\n    logo: {\n        cursor: 'pointer',\n        maxHeight: 50,\n        width: 90\n    },\n    toolbarActions: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    menuIconMobile: {\n        height: 40,\n        width: 40,\n        cursor: \"pointer\",\n        fill: \"#ff0000\"\n    },\n    mainMobile: {\n        height: \"100%\",\n        padding: \"0 40px\"\n    },\n    grid: {\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"100%\"\n    },\n    mainContainer: {\n        paddingBottom: 30\n    },\n    row: {\n        marginBottom: 20\n    },\n    backButton: {\n        color: \"#000000\"\n    },\n    backIcon: {\n        fill: \"#000000\"\n    },\n}));\n\n/*const BarcodeReader = props => {\n    const {handleClose, handleCapture} = props;\n\n    const scanBarcode = () => {\n        const codeReader = new BrowserMultiFormatReader()\n\n        const constraints = {\n            video: {\n                facingMode: \"environment\"\n            }\n        };\n\n        codeReader.decodeFromConstraints(constraints, \"video\", (result, err) => {\n            if (result) {\n                handleCapture(result.text);\n                console.log(result.text)\n                codeReader.reset();\n                handleClose();\n            }\n            if (err && !(err instanceof NotFoundException)) {\n                console.error('Error during scanning:', err);  // Log any errors except NotFoundException\n            }\n        })\n            .catch(err => {\n                console.error('Error accessing environment camera, falling back to default camera:', err);\n\n                // Fallback to the default camera if environment camera is not available\n                codeReader.decodeFromVideoDevice(null, 'video', (result, err) => {\n                    if (result) {\n                        handleCapture(result.text);\n                        codeReader.reset();\n                        handleClose();\n                    }\n                    if (err && !(err instanceof NotFoundException)) {\n                        console.error('Error during fallback scanning:', err);\n                    }\n                });\n            })\n    };\n\n    useEffect(() => {\n        scanBarcode();\n    }, []);\n\n    return (\n        <Grid item xs={12}>\n            <video id=\"video\" width=\"300\" height=\"200\"></video>\n        </Grid>\n    )\n}*/\n\nconst BarcodeReader = props => {\n    const {\n        codeReader,\n        handleClose,\n        handleCapture,\n        selectedDeviceId,\n        videoInputDevices,\n        setSelectedDeviceId,\n    } = props;\n\n\n    const startCamera = () => {\n        codeReader.decodeFromVideoDevice(selectedDeviceId, \"video\", (result, err) => {\n            if(result) {\n                handleCapture(result.text);\n                codeReader.reset();\n                handleClose();\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (selectedDeviceId) {\n            startCamera();\n        }\n    }, [selectedDeviceId]);\n\n    return (\n        <Grid item xs={12}>\n            <video id=\"video\" width=\"300\" height=\"200\"></video>\n\n            {videoInputDevices.length > 0 &&\n                <Select\n                    value={selectedDeviceId}\n                    onChange={e => setSelectedDeviceId(e.target.value)}\n                >\n                    {videoInputDevices.map((device, index) => (\n                        <MenuItem key={index} value={device.deviceId}>{device.label}</MenuItem>\n                    ))}\n                </Select>\n            }\n        </Grid>\n    )\n}\n\nconst Camera = () => {\n    const classes = useStyles();\n    const codeReader = new BrowserMultiFormatReader();\n\n    const [open, setOpen] = useState(false);\n    const [isScanning, setIsScanning] = useState(false);\n    const [barcode, setBarcode] = useState(\"\");\n    const [videoInputDevices, setVideoInputDevices] = useState([]);\n    const [selectedDeviceId, setSelectedDeviceId] = useState('');\n\n    useEffect(() => {\n        codeReader.listVideoInputDevices()\n            .then(devices => {\n                setVideoInputDevices(devices);\n                //Set default device\n                if (devices.length > 0) {\n                    setSelectedDeviceId(devices[0].deviceId);\n                }\n            })\n            .catch(err => {\n                console.log(\"Error listing video input devices: \", err);\n            })\n\n        return () => {\n            codeReader.reset();\n        };\n    }, []);\n\n\n    return (\n        <>\n            <AppBar\n                position=\"fixed\"\n                className={classes.appBar}\n                elevation={3}\n            >\n                <Toolbar style={{justifyContent: 'space-between'}}>\n                    <img alt=\"Logo\" src=\"/images/logo.png\" className={classes.logo}/>\n                    <div className={classes.toolbarActions}>\n                        <MenuIcon className={classes.menuIconMobile} onClick={() => setOpen(true)}/>\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <main className={classes.mainMobile}>\n                <Grid container className={classes.grid} style={{paddingTop: 120}}>\n                    <>\n                        {isScanning &&\n                            <BarcodeReader\n                                handleClose={() => setIsScanning(false)}\n                                handleCapture={e => setBarcode(e)}\n                                selectedDeviceId={selectedDeviceId}\n                                videoInputDevices={videoInputDevices}\n                                setSelectedDeviceId={setSelectedDeviceId}\n                                codeReader={codeReader}\n                            />\n                        }\n                        <Grid item xs={12} md={12}>\n                            <Grid container className={classes.mainContainer}>\n                                <Grid item xs={12} className={classes.row}>\n                                    <Button\n                                        className={classes.backButton}\n                                        startIcon={<KeyboardBackspaceIcon className={classes.backIcon}/>}\n                                    >\n                                        Ga tillbaka\n                                    </Button>\n                                </Grid>\n                                <Grid item xs={7} className={classes.row} style={{width: '100%'}}>\n                                    <Typography\n                                        variant=\"h5\"><b>A-Clinic Foundation, test</b></Typography>\n                                </Grid>\n                                <Grid item xs={5} className={classes.row} style={{width: '100%'}}>\n                                    <Typography\n                                        variant=\"h5\"\n                                        style={{textAlign: 'right', fontSize: '20px'}}\n                                    >\n                                        <b>Antal skapade remisser</b> 0\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <div className={classes.barcodeInputWrap}>\n                                        <TextField\n                                            variant=\"outlined\"\n                                            name=\"barcode\"\n                                            label=\"Skanna eller mata in ID-nummer\"\n                                            InputProps={{\n                                                classes: {\n                                                    notchedOutline: classes.notchedOutline\n                                                }\n                                            }}\n                                            inputProps={{maxLength: 10}}\n                                            value={barcode}\n                                            className={`${classes.paddingLeft} ${classes.barcodeTextInput}`}\n                                            InputLabelProps={{classes: {root: classes.textFieldInputLabel}}}\n                                            placeholder=\"Skanna eller mata in ID-nummer\"\n                                            onChange={(e) => {\n                                                if (Number.isInteger(Number(e.target.value))) {\n                                                    setBarcode(e.target.value)\n                                                }\n\n                                            }}\n                                        />\n                                        <Button\n                                            style={{\n                                                backgroundColor: \"green\",\n                                                marginTop: 9,\n                                                borderTopLeftRadius: 0,\n                                                borderBottomLeftRadius: 0,\n                                                maxHeight: 58,\n                                            }}\n                                            onClick={() => setIsScanning(true)}\n                                        >\n                                            <CameraAltOutlinedIcon\n                                                style={{fill: \"white\", width: \"36px\", height: \"36px\"}}/>\n                                        </Button>\n                                    </div>\n                                </Grid>\n\n                            </Grid>\n                        </Grid>\n                    </>\n                </Grid>\n            </main>\n        </>\n    )\n}\n\nexport default Camera;","import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport './style.css';\nimport Quill from \"./Quill\";\nimport {MyEditor as Draft} from \"./Draft\";\nimport logo from './logo.svg';\nimport {Btns} from \"./Btns\";\nimport TinyMCE from \"./TinyMCE\";\nimport CkEditor from \"./CkEditor\";\nimport Tiptap from \"./TipTap\";\nimport BarcodeReader from \"./BarcodeReader\";\nimport StripeContainer from \"./StripeContainer\";\nimport {BrowserRouter as Router, Switch, Route, Redirect, useLocation} from \"react-router-dom\";\nimport Canvas from \"./Canvas\";\nimport Home from \"./Home\";\nimport Grids from \"./Grids\";\nimport ButtonsBorder from \"./ButtonsBorder\";\nimport MroApproval from \"./MroApproval\";\nimport './App.css';\nimport SpeechBubble from \"./SpeechBubble\";\nimport {TextField} from \"@material-ui/core\";\nimport Timer from \"./Timer\";\nimport RIRSelect from \"./Select\";\nimport ProductListing from \"./Prod/ProdProductListing\";\nimport NullDependency from \"./NullDependency\";\nimport EditTable from \"./EditTable\";\nimport DateFNSTimer from \"./DateFNSTimer\";\nimport ImageResize from \"./ImageResize\";\nimport ReactImageResize from \"./ReactImageResize\";\nimport BootStrapSwitch from \"./BootStrapSwitch\";\nimport Camera from \"./Camera\";\n\nfunction App() {\n\n/*  const options = ['Cartao de cidadao', 'Cartao da bibilioteca', 'I love you'];\n  const [selected, setSelected] = useState(options[0]);\n\n  useEffect(() => {\n    let iframes = document.getElementsByTagName(\"iframe\");\n    console.log(iframes)\n    if (iframes.length > 0)\n      iframes[0].classList.add(\"hideIframe\");\n  }, []);\n\n  useEffect(() => {\n    const data = { username: \"api@example.com\", password: \"sylius-api\" };\n    axios.get('https://pokeapi.co/api/v2/pokemon/15')\n      .then(response => {\n        console.log(\"here\")\n        console.log(response)\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, []);*/\n\n    useEffect(() => {\n        let iframes = document.getElementsByTagName(\"iframe\");\n        if (iframes.length > 0) {\n            iframes[0].classList.add(\"hideIframe\");\n        }\n    }, []);\n\n  return (\n    <>\n     {/* <Router>\n        <Switch>\n          <Route exact path = \"/\"><DateFNSTimer/></Route>\n          <Route exact path = \"/home\"><Home/></Route>\n        </Switch>\n      </Router>*/}\n      {/*<EditTable/>*/}\n     {/* <NullDependency/>*/}\n      {/*<ProductListing/>*/}\n      {/*<RIRSelect selectedValue={selected} setSelectedValue={setSelected} options={options}/>*/}\n      {/*<Timer/>*/}\n      {/*<SpeechBubble/>*/}\n      {/*<MroApproval/>*/}\n      {/*<ButtonsBorder/>*/}\n      {/*<Grids/>*/}\n      {/*<Router>*/}\n      {/*  <Switch>*/}\n      {/*    <Route exact path=\"/\" component={Home} />*/}\n      {/*    <Route exact path=\"/stripe\" component={StripeContainer} />*/}\n      {/*  </Switch>*/}\n      {/*</Router>*/}\n      {/*<Quill/>*/}\n      {/* <Draft/> */}\n      {/* <div style={{marginRight: 100, marginTop: 100}}>*/}\n      {/*   <Btns/>*/}\n      {/* </div>*/}\n      {/* <TinyMCE/>*/}\n      {/*<CkEditor/>*/}\n      {/*  <Tiptap/>*/}\n      {/*  <BarcodeReader/>*/}\n      {/*  <StripeContainer />*/}\n      {/*<Canvas/>*/}\n      {/*<DateFNSTimer/>*/}\n     {/* <ImageResize/>*/}\n     {/* <ReactImageResize/>*/}\n     {/* <BootStrapSwitch/>*/}\n        <Camera/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}